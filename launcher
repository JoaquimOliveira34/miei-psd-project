cleanup_ports () {  
    PORTS=""
    PORTS+=$'\n'$(lsof -n -i4TCP:11101)
    PORTS+=$'\n'$(lsof -n -i4TCP:11102)
    PORTS+=$'\n'$(lsof -n -i :8080)
    PORTS+=$'\n'$(lsof -n -i :12345)
    PORTS+=$'\n'$(lsof -n -i :9901)

    PORTS=$(echo "$PORTS" | grep LISTEN | awk '{ print $2 }')

    if [[ $PORTS = *[!\ ]* ]]; then    
        echo "Killing $PORTS"
        echo $PORTS | xargs kill
    fi
}

cleanup () {
    # A string %1 é expandida para o PID do primeiro processo interno lançado por esta script,
    # A string %2 é expandida para o segundo, e por aí fora
    kill %1; kill %2; kill %3; kill %4;
    # Não precisamos de fazer kill %5 pois o REST não foi iniciado em background (com o "&" no fim do comando)
    # E como tal quando o terminal recebe CTRL+C termina esse último processo automaticamente

    # Por alguma razão, matar as exchanges não chega para matar os processos que fazem bind das suas portas
    # Portanto temos de localizá-los manualmente e terminá-los
    cleanup_ports
}

cleanup_ports

# Regista a função cleanup para ser executada quando este comando receber SIGINT
trap 'cleanup' SIGINT

# De seguida corre as exchanges em background
cd exchanges
make run ARGS="11101 9999 21101 localhost 8080 15" | sed -e 's/^/[EXCHANGE 1] /' & 
make run ARGS="11102 9999 21102 localhost 8080 15" | sed -e 's/^/[EXCHANGE 2] /' &

# Corre o proxy XSUB/XPUB em background
make proxy ARGS="9901 9902 21101 21102" | sed -e 's/^/[PROXY] /' &

# Corre o REST em background
cd ../rest
java -jar target/Hello-1.0-SNAPSHOT.jar server config.yml | sed -e 's/^/[REST] /' &

# Como o erlang necessita do REST, esperamos por ele
read -p "Press enter to launch erlang (when all other services are online)"

# Por fim corre o erlang
# NOTA: O comando do erlang, como é o último, não pode correr em background (para a
# o script continuar a executar no terminal) e como tal não pode ter o "&" no fim
cd ../erlang
make run | sed -e 's/^/[ERLANG] /'

